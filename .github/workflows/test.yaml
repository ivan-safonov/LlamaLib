name: Build library

on:
  push:

env:
  LLAMACPP_VERSION: b4218
  CMAKE_COMMON_JOBS: '-DLLAMA_BUILD_COMMON=ON -DGGML_STATIC=ON -DLLAMA_BUILD_TESTS=OFF -DLLAMA_BUILD_EXAMPLES=OFF -DBUILD_UNDREAMAI_SERVER=ON -DBUILD_SHARED_LIBS=OFF'
  CMAKE_COMMON_DIR: -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs

jobs:
  windows-build:
    runs-on: windows-2019

    env:
      CMAKE_COMMON: '-DGGML_NATIVE=OFF -DLLAMA_SERVER_SSL=ON'
      VULKAN_VERSION: 1.3.261.1
      PLATFORM: windows

    strategy:
      matrix:
        include:
          - build: 'cuda-cu12.2.0'
            defines: '-DGGML_CUDA=ON -DGGML_MINIMIZE_CODE_SIZE=ON -DGGML_NO_IQUANTS=ON'

    steps:
        - id: checkout
          name: Clone
          uses: actions/checkout@v4

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            git apply ../llama.cpp.patch
            mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
            rm -r ggml/src/ggml-cuda
            cp -R ../tinyBLAS ggml/src/ggml-cuda
            mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            mkdir -p build/licenses build/libs
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
          shell: bash


        - id: setup_vulcan_windows
          if: matrix.build == 'vulkan'
          name: Install Vulkan SDK
          run: |
            curl.exe -o $env:RUNNER_TEMP/VulkanSDK-Installer.exe -L "https://sdk.lunarg.com/sdk/download/${env:VULKAN_VERSION}/windows/VulkanSDK-${env:VULKAN_VERSION}-Installer.exe"
            & "$env:RUNNER_TEMP\VulkanSDK-Installer.exe" --accept-licenses --default-answer --confirm-command install
            Add-Content $env:GITHUB_ENV "VULKAN_SDK=C:\VulkanSDK\${env:VULKAN_VERSION}"
            Add-Content $env:GITHUB_PATH "C:\VulkanSDK\${env:VULKAN_VERSION}\bin"
            curl.exe -o $env:RUNNER_TEMP/VulkanRT-Components.zip -L "https://sdk.lunarg.com/sdk/download/1.3.283.0/windows/VulkanRT-1.3.283.0-Components.zip"
            7z x "-o${env:RUNNER_TEMP}" $env:RUNNER_TEMP/VulkanRT-Components.zip
            mkdir .\build\libs\Release
            cp ${env:RUNNER_TEMP}/VulkanRT*\x64\vulkan-1.dll .\build\libs\Release

        - id: setup_openssl_windows
          name: Install OpenSSL
          run: |
            choco install openssl --no-progress
            $OPENSSL_ROOT_DIR = 'C:\Program Files\OpenSSL'
            Copy-Item $OPENSSL_ROOT_DIR\lib\VC\x64\MD\*.lib $OPENSSL_ROOT_DIR\lib\
            Copy-Item $OPENSSL_ROOT_DIR\lib\libcrypto_static.lib $OPENSSL_ROOT_DIR\lib\libcrypto.a
            Copy-Item $OPENSSL_ROOT_DIR\lib\libssl_static.lib $OPENSSL_ROOT_DIR\lib\libssl.a
            Add-Content $env:GITHUB_ENV "OPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR"

        - id: set_cuda_var_windows
          if: startsWith(matrix.build, 'cuda')
          name: Set CUDA variable
          run: |
            $pattern = "\d+\.\d+\.\d+"
            $CUDA = [regex]::Match("${{ matrix.build }}", $pattern).Value
            Add-Content $env:GITHUB_ENV "CUDA=$CUDA"

        - id: setup_cuda_windows
          if: startsWith(matrix.build, 'cuda')
          uses: Jimver/cuda-toolkit@v0.2.15
          with:
            cuda: ${{ env.CUDA }}
            method: network
            sub-packages: '["nvcc", "cudart", "cublas", "cublas_dev", "thrust", "visual_studio_integration"]'


        - id: cpu-cores
          name: Get number of CPU cores
          uses: SimenB/github-actions-cpu-cores@v2

        - id: cmake_build_windows
          name: Build
          run: |
            cd build
            cmake .. -DLIBRARY_SUFFIX=${{ env.PLATFORM }}-${{ matrix.build }} ${{ matrix.defines }} ${{ env.CMAKE_COMMON }} ${{ env.CMAKE_COMMON_JOBS }} ${{ env.CMAKE_COMMON_DIR }}
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}


        - id: move_files_windows
          if: startsWith(matrix.build, 'hip')
          name: Move files to Release folder
          run: |
            mkdir build/Release
            mkdir build/libs/Release
            move build/libs/*exe build/libs/Release
            move build/libs/*dll build/libs/Release
            move build/libs/*exp build/libs/Release
            move build/libs/*lib build/libs/Release

        - id: set_upload_name_windows
          name: Set upload name
          run: |
            $NAME = "undreamai-test-llamacpp-${{ env.PLATFORM }}-${{ matrix.build }}.zip"
            Add-Content $env:GITHUB_ENV "UPLOAD_NAME=$NAME"
            Add-Content $env:GITHUB_ENV "UPLOAD_PATH=$NAME"

        - id: pack_artifacts_windows
          name: Pack artifacts
          run: |
            ls -R build
            del build/libs/Release/undreamai_test.exe
            mkdir artifacts
            Copy-Item .\build\licenses\* .\artifacts\
            Copy-Item .\build\Release\* .\artifacts\
            Copy-Item .\build\libs\Release\*dll .\artifacts\
            $serverPath = ".\build\libs\Release\undreamai_server.exe"
            if (Test-Path $serverPath) {
                Copy-Item $serverPath -Destination ".\artifacts\"
            }
            cd artifacts
            7z a ../${{ env.UPLOAD_NAME }} *

        - id: upload
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.UPLOAD_NAME }}
            path: ${{ env.UPLOAD_PATH }}
